#!/usr/bin/env node
import pg from 'pg';
const { Pool } = pg;

console.log('üîÑ R√©initialisation de la base de donn√©es...\n');

const pool = new Pool({
  user: 'tradingbot_user',
  host: '91.99.163.156',
  database: 'tradingbot_db',
  password: 'tradingbot_secure_2024',
  port: 5432,
});

async function resetDatabase() {
  try {
    // Afficher l'√©tat actuel
    console.log('üìä √âtat actuel de la base de donn√©es:');
    const before = await pool.query(`
      SELECT 'trades' as table_name, COUNT(*) as row_count FROM trades
      UNION ALL
      SELECT 'strategy_performances', COUNT(*) FROM strategy_performances
      UNION ALL
      SELECT 'market_snapshots', COUNT(*) FROM market_snapshots
    `);
    console.table(before.rows);
    
    // Demander confirmation
    console.log('\n‚ö†Ô∏è  ATTENTION: Toutes les donn√©es de trading vont √™tre supprim√©es!');
    console.log('Capital repartira √†: 100,000 USDT\n');
    
    // Note: En production, utiliser readline pour la confirmation
    // Pour l'instant, on suppose que l'utilisateur veut vraiment reset
    
    console.log('üóëÔ∏è  Suppression des donn√©es...\n');
    
    // Supprimer les donn√©es (CASCADE supprime aussi dans strategy_performances si FK)
    await pool.query('TRUNCATE TABLE trades RESTART IDENTITY CASCADE');
    await pool.query('TRUNCATE TABLE strategy_performances RESTART IDENTITY CASCADE');
    await pool.query('TRUNCATE TABLE market_snapshots RESTART IDENTITY CASCADE');
    
    // D√©sactiver toutes les strat√©gies
    await pool.query('UPDATE strategies SET is_active = false');
    
    console.log('‚úÖ Donn√©es supprim√©es avec succ√®s!\n');
    
    // V√©rifier l'√©tat final
    console.log('üìã V√©rification finale:');
    const after = await pool.query(`
      SELECT 'trades' as table_name, COUNT(*) as row_count FROM trades
      UNION ALL
      SELECT 'strategy_performances', COUNT(*) FROM strategy_performances
      UNION ALL
      SELECT 'market_snapshots', COUNT(*) FROM market_snapshots
      UNION ALL
      SELECT 'strategies', COUNT(*) FROM strategies
    `);
    console.table(after.rows);
    
    // Afficher les strat√©gies disponibles
    console.log('üéØ Strat√©gies disponibles:');
    const strategies = await pool.query('SELECT name, type, is_active FROM strategies ORDER BY id');
    console.table(strategies.rows);
    
    console.log('\n‚úÖ Base de donn√©es r√©initialis√©e!');
    console.log('üöÄ Capital de d√©part: 100,000 USDT');
    console.log('\nProchaines √©tapes:');
    console.log('  1. Red√©marrer votre application');
    console.log('  2. Activer les strat√©gies souhait√©es');
    console.log('  3. Le trading repartira √† z√©ro\n');
    
  } catch (error) {
    console.error('‚ùå Erreur:', error.message);
  } finally {
    await pool.end();
  }
}

resetDatabase();

